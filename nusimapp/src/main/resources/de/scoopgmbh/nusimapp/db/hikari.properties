#
# nusim-loader
#
# (c) 2020 Deutsche Telekom AG.
# Deutsche Telekom AG and all other contributors /
# copyright owners license this file to you under the Apache
# License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#

# Hikari database connection pool settings
# ========================================
#
# See https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
# for a list of# available configuration properties. (There are much more than
# the ones listed# here!)
#
# Note: HikariCP uses milliseconds for all time values.
#
# This property controls the default auto-commit behavior of connections
# returned from the pool. It is a boolean value. Default: true
# We set it to false, because our JOOQTransactionManager cares about committing.
autoCommit=false
# This property controls the maximum number of milliseconds that a client
# (that's you) will wait for a connection from the pool. If this time is
# exceeded without a connection becoming available, a SQLException will be
# thrown. Lowest acceptable connection timeout is 250 ms.
# Default: 30000 (30 seconds)
connectionTimeout=10000
# This property controls the maximum size that the pool is allowed to reach,
# including both idle and in-use connections. Basically this value will
# determine the maximum number of actual connections to the database backend.
# A reasonable value for this is best determined by your execution environment.
# When the pool reaches this size, and no idle connections are available, calls
# to getConnection() will block for up to connectionTimeout milliseconds before
# timing out. Please read
# https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
# Default: 10
maximumPoolSize=10
# This property controls the minimum number of idle connections that HikariCP
# tries to maintain in the pool. If the idle connections dip below this value
# and total connections in the pool are less than maximumPoolSize, HikariCP
# will make a best effort to add additional connections quickly and efficiently.
# However, for maximum performance and responsiveness to spike demands, we
# recommend not setting this value and instead allowing HikariCP to act as a
# fixed size connection pool. Default: same as maximumPoolSize
minimumIdle=1
# This property controls the maximum lifetime of a connection in the pool.
# An in-use connection will never be retired, only when it is closed will it
# then be removed. On a connection-by-connection basis, minor negative
# attenuation is applied to avoid mass-extinction in the pool. *We strongly
# recommend setting this value, and it should be at least 30 seconds less
# than any database or infrastructure imposed connection time limit.* A value
# of 0 indicates no maximum lifetime (infinite lifetime), subject of course to
# the idleTimeout setting. Default: 1800000 (30 minutes)
# Set to 230000 (3:50 minutes) because the Azure LoadBalancer kills idle
# connections hard after 4 minutes, see
# https://serverfault.com/questions/661704/azure-closing-idle-network-connections
# and https://serverfault.com/a/851251
maxLifetime=230000
# This property controls the maximum amount of time that a connection is
# allowed to sit idle in the pool. *This setting only applies when minimumIdle
# is defined to be less than maximumPoolSize.* Whether a connection is retired
# as idle or not is subject to a maximum variation of +30 seconds, and average
# variation of +15 seconds. A connection will never be retired as idle before
# this timeout. Once the pool reaches minimumIdle connections, connections
# will no longer be retired, even if idle. A value of 0 means that idle
# connections are never removed from the pool. The minimum allowed value is
# 10000ms (10 seconds). Default: 600000 (10 minutes)
# Set to 230000 (3:50 minutes) because the Azure LoadBalancer kills idle
# connections hard after 4 minutes, see
# https://serverfault.com/questions/661704/azure-closing-idle-network-connections
# and https://serverfault.com/a/851251
idleTimeout=230000
# This property controls whether or not JMX Management Beans ("MBeans") are
# registered or not. Default: false
registerMbeans=false
# This property determines whether HikariCP isolates internal pool queries,
# such as the connection alive test, in their own transaction. Since these are
# typically read-only queries, it is rarely necessary to encapsulate them in
# their own transaction. This property only applies if autoCommit is disabled.
# Default: false
isolateInternalQueries=true
#
# JDBC Driver specific properties
# ===============================
#
# These are properties specific to the PostgreSQL JDBC driver. Hikari will
# pass them to the JDBC driver. They must be prefixed with 'dataSource.'. See
# https://jdbc.postgresql.org/documentation/head/connect.html#connection-parameters
# for a complete list.
#
# Determine the number of queries that are cached in each connection.
# The default is 256, meaning if you use more than 256 different queries in
# prepareStatement() calls, the least recently used ones will be discarded.
# The cache allows application to benefit from “Server Prepared Statements”
# (see prepareThreshold) even if the prepared statement is closed after each
# execution. The value of 0 disables the cache.
# N.B.: each connection has its own statement cache.
dataSource.preparedStatementCacheQueries=256
# Determine the number of PreparedStatement executions required before switching
# over to use server side prepared statements. The default is five, meaning
# start using server side prepared statements on the fifth execution of the same
# PreparedStatement object. More information on server side prepared statements
# is available at https://jdbc.postgresql.org/documentation/head/server-prepare.html
dataSource.prepareThreshold=5
# Determine the maximum size (in mebibytes) of the prepared queries cache (see
# preparedStatementCacheQueries). The default is 5, meaning if you happen to
# cache more than 5 MiB of queries the least recently used ones will be
# discarded. The main aim of this setting is to prevent OutOfMemoryError.
# The value of 0 disables the cache.
dataSource.preparedStatementCacheSizeMiB=5
# Enable or disable TCP keep-alive probe. The default is false.
dataSource.tcpKeepAlive=true
# Specifies the name of the application that is using the connection. This
# allows a database administrator to see what applications are connected to the
# server and what resources they are using through views like pg_stat_activity.
# Note: the name is changed to "MDMService@<hostname>" during start dynamically,
# see MainApplicationContext::createDataSource()
dataSource.ApplicationName=NusimApp
# Assume that the server is at least the given version, thus enabling to some
# optimization at connection time instead of trying to be version blind.
dataSource.assumeMinServerVersion=9.5
